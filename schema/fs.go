// Copyright Â© 2019 Open Package Management Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "esc -private -modtime=1546544639 -pkg=schema -include=.*\.schema.json$ -ignore=test-fixtures/* ."; DO NOT EDIT.

package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/namespace/namespace.create.schema.json": {
		name:    "namespace.create.schema.json",
		local:   "namespace/namespace.create.schema.json",
		size:    645,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/7ySzW6DMBCE7zyF5faYYFAJtFx7raq8wgY2ZFP8I3srtYp494q/lIace2T2m50R3ksk
hJCPVMtSyBOzC6VS1qFxUH1AgyEmq0J1Qg3KgMbgoMJt5REY5WY0j+N5QanUOVizHdXY+kbVHo68TYpp
0cNkhLomJmug3Xvr0DNhkKU4QhtwJNxSH6r2agsHbJfKgAIzerO/55iQ+JJuupXcT/jbYd8/sCfTyD/z
7ver20Rrjz2cseLZc0WkR2ffSBPfFNXwRfpTy1Kkz1mWF1mWFE9F8rLbpXmaLxM0mYlM7gWTYWzQr5MD
Ww8N/mt4dG0gmbgdmNfhSsT7fDbTs9/+uC76CQAA//9BNf3dhQIAAA==
`,
	},

	"/namespace/namespace.list.schema.json": {
		name:    "namespace.list.schema.json",
		local:   "namespace/namespace.list.schema.json",
		size:    3271,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/+yW227TQBCG7/0Uq4XLpE5EmoCfASHuERdTe+pO8R7YGVdUKO+OfGqiEh9SIKiSb2e+
mX9n97c1PyOllH5LmU6UvhPxnMSx82g9pN8gR74iF3N6hwZiCwbZQ4rLglj0oiltkl15Esf37OyyiV65
kMdZgFtZrnZtmzdtIWQZCTkLxefgPAYhZJ2oWygYG8Ifx+uDVtGnUxxHqwQJmmexSToH9KTgIV3ADRYn
U+fpTFJrodRZLg2GfqSi5NFj9QLu5h5T0afB/aJHwwf3QNnf0Ygm6o61+72ofvi+y++6sQSy+ZRu30sn
cOHH9MFVw/LwRZ+rfcYJOiOTIRmjKtDADzKl0Ylav99strvNZrV7t1t9uL5eb9fbxWg52bZ8Ncp2L0hW
MMegh/j9YDddMmavebroBXP/4S8goHdM4sKYfWZ3zu68uDtZXIAcZ2POxvw/xvyHWw0LSNm7h6Ctb+pL
z4cBqdAD6r7vRjAYsiCnViKl1NfFS1apaGCg/vmPwScKQoDHDqobN5gWkqImPhKL+nTY+Nv0M5V99CsA
AP//vOxdH8cMAAA=
`,
	},

	"/namespace/namespace.single.schema.json": {
		name:    "namespace.single.schema.json",
		local:   "namespace/namespace.single.schema.json",
		size:    2635,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/+xW3W6yQBC95ynIft8lCqQoLU/hfdOLEUZcy/50dzBtDO/eIGgVoZqmTZrq7ZlzZs+w
ZzNsHNd12X+escRlSyJtE99XGqWG9BlytGOufJsuUYAvQaDVkCLzGlWD75SJ76+skqMGHSuT+5mBBY2C
uO3wrxVClnHiSkIxM0qjIY6WJe4CCosNQx/iW481WsAci0PkomYtr7dlW0uVtKVAc1LZCoEIjZwN61vi
eBN61UCxrtObxvpjWTJc5qyHVXWxynOGuqj5ClM67tKh1zOvefYH5nJ6lQOaPYXVie3Epd/sh+SlVAQ/
kTFtVG2y9ytfesD5Y3YvhQtOn1yZgFcuSsESN7yPomkcRUF8FwcPk0k4DafekIrLVhV4Z7LAJWGOpjcM
fVpWWsx+q+FvfpUGtbKclBm4wFsarikNlpSBHG9BuLogfHGpWQIquxsK5Xaex+NsQUp83f6uHRyARnAJ
dLysn7zzW9LZGzlxWTnvAQAA//+4Xa/FSwoAAA==
`,
	},

	"/project/project.create.schema.json": {
		name:    "project.create.schema.json",
		local:   "project/project.create.schema.json",
		size:    330,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/2yPQc6DIBCF956C8P9LlXbVhFP0CohTxVqYDLNpDHdvEE3b2CXvfR95s1RCCPnveqmF
HJkxaqUCgkdj72aA2Lqgoh3hYRRSmMByYwkMg6yLWspd10pNMfimpG2gQfVkbtycLts3f5uIFBCIHUSp
xTojp7PpYP5MVtQwA/nrL2ND2uVcp0OcG34i5HWRyflBfvXp/Up1dXRClw/enZUu3IFI1SsAAP//Razw
MUoBAAA=
`,
	},

	"/project/project.list.schema.json": {
		name:    "project.list.schema.json",
		local:   "project/project.list.schema.json",
		size:    1033,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/6yRT27yQAzF9zlFNN+3BCaogbQ5Ra9gEhNMM3/kMVVRxd2rkNCikklZsH1+7/c8ns8k
TVP1n2pVpmon4kOptfNoPVRv0GBYkNOh2qEB7dntsZJ5S0HUrA/2o0u41HofnJ336sJxo2uGrcyzYoD8
G4KenUcWwqDK9LzEoHYN11onk6D5pUUZP+MWNtiOjrop1DUJOQvt6zVmC23A2Vhgum0wVc6Gg0GOWzqX
HD12J3Ob7rVq3HiaRTo8u3eqH9OR3Nn7F+42pCwYjB3/QgvCZJt7acFD9UAko3eBxHH8S5WBDzIHo8p0
+Zzn6yLPs+KpyF5Wq+V6uR69lCE7RLLJS5IVbJBvN00m9o7/w7Xx2wXMcLyYzuDedoM5JV8BAAD//0pJ
sUkJBAAA
`,
	},

	"/project/project.single.schema.json": {
		name:    "project.single.schema.json",
		local:   "project/project.single.schema.json",
		size:    950,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/9ySW26zMBSE370Ky///SGJQCbSsIls4gRPiFF9kn1StIvZecSmiASr1ta8z89meke+M
cy7+q0oUXFyIXCiktA6Ng/IVagx7ZWUoL6hBOm+vWJKIBmZQv7hCymuwZjeoe+trWXk40y7OR/7fCDpv
HXpSGETB+/s7tYETNnOlE6GqFClroDnOoTM0AaNZbvXI0SutCTeNfuH0IBChN8dtfgzu70nUbpidTx8O
uykCeWVqsZJqH7U2Ylun2FM/NPsh3nV+U9Uf6MVWyQ1miggDGh++y/pjvyPBQflbzqOzQZH1iyGFhnel
b1oUPHlO0yxP0zh/yuOXwyHJkmzeRyszJuO1msoQ1uiny9n0gsUSLfsMAAD//36DfrS2AwAA
`,
	},

	"/repository/repository.create.schema.json": {
		name:    "repository.create.schema.json",
		local:   "repository/repository.create.schema.json",
		size:    378,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/4SOTY6DMAyF9zlFlJklkJnVSDnFXCEEF0JpYjneVCh3ryDQH1GpS7/vfbZnIaVU375T
RqqBGZPROiIEtO5se0iNjzq5AS5WE2CsHYFlUFXxCtldo/WYYqhL2kTqdUf2xPXP37bjaxORIgKxh6SM
XH9Y0sm2MD0na9UyA4X/d8ZWaebfKh/ihfAVYfkuMfnQqxeeH1OuxNGJ7QiOd+de2fksPp1ZDxTvsDSL
WwAAAP//ALvfrXoBAAA=
`,
	},

	"/repository/repository.list.schema.json": {
		name:    "repository.list.schema.json",
		local:   "repository/repository.list.schema.json",
		size:    798,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/6yQzU7DMAzH732KKHBcF25IfRuvM1lGG1u2LxPau6M0HR8bBTT1+v/46W+/Nc45/5j2
vnP+YMbahUCMmaF/hYi6TRS0P+AIQZCpHZKa39RW1S/NLoSjUm6ruiWJYS/wYu3T80x4mIssxCiWUH3n
pgVFLXhNRvJdL1YyHK+0Rc6nPcAOhx+t4tqJsUyn3RF789eR8+aGl2HEv2hqknL8L00Z+hWRLDTdshrQ
IK74v7lx17bmF/bylK/BjxSIwOkSmsA1doM5N+8BAAD//8EyicoeAwAA
`,
	},

	"/repository/repository.single.schema.json": {
		name:    "repository.single.schema.json",
		local:   "repository/repository.single.schema.json",
		size:    2155,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/8RVTY/aMBS851ekXlS1Jc4HDWGJVFVcem0PPS3KorfkEbwliWsbqSzKf69CskAI+VgV
qTdn/OZ5xvbEe03XdTJgIfF1slaKS9+yUo4Jh+UviFCaLLXkco0xWAJ5SoyCUECvJN+ynmWa0AI1UxFZ
oYCVovakJN+VRC5SjkIxlMTXD4vn6AaecHOOHEpBKRTJj2uMssTcO0ZWg/MZteOYq5NKsCQilfns9JUZ
Wp2TPj3jUr1yjiUkgRgvNF5fpkqRHJZv5XGRHjS8jaUguukmQrL7viK+Pr+c0fV69Ul500qVupBFKFVr
zZn+3PWjXMNo7PnzGf0GdGXTabD33GxAGhtkWm/4/CL8Z49jZ1Tx6Izub2XyEgtqrru9dbqq+JkDfcld
DD989edDc0GDI/Lxk5+PZ/TBptMvCxoMB8RoaNkW55YDJDGGDH4W5F5yZ/Sh1HcavrsbvKePC3MY7G3D
GXmZ1a/s9nYke2lzEsMfFm9j4uvOvet6E9e1J58n9nQ8djzHaxITs6Rk2V16WaIwQtFf8FZsWjJCmMK4
I0OrVMSQ3zayFaxpQ/vtaZPKczYIATvSJzv1VkTg7y0TGDb8Movj67inRkvkesT3+hv2b++equWn6SXS
jrxa00z7GwAA//+1jk5YawgAAA==
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},

	"/namespace": {
		name:  "namespace",
		local: `namespace`,
		isDir: true,
	},

	"/project": {
		name:  "project",
		local: `project`,
		isDir: true,
	},

	"/repository": {
		name:  "repository",
		local: `repository`,
		isDir: true,
	},

	"/tag": {
		name:  "tag",
		local: `tag`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {},

	"namespace": {
		_escData["/namespace/namespace.create.schema.json"],
		_escData["/namespace/namespace.list.schema.json"],
		_escData["/namespace/namespace.single.schema.json"],
	},

	"project": {
		_escData["/project/project.create.schema.json"],
		_escData["/project/project.list.schema.json"],
		_escData["/project/project.single.schema.json"],
	},

	"repository": {
		_escData["/repository/repository.create.schema.json"],
		_escData["/repository/repository.list.schema.json"],
		_escData["/repository/repository.single.schema.json"],
	},

	"tag": {},
}
