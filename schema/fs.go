// Copyright Â© 2019 Open Package Management Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "esc -private -modtime=1546544639 -pkg=schema -include=.*\.schema.json$ -ignore=test-fixtures/* ."; DO NOT EDIT.

package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/namespace/namespace.create.schema.json": {
		name:    "namespace.create.schema.json",
		local:   "namespace/namespace.create.schema.json",
		size:    611,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/7xSzU6DQBC+8xSb1WNhIVJQrl6N8RWmdKRb2Z/Mjomm4d0NsNRaeva43898X3bmlAgh
5L3ey0bIA7MPjVLOo/XQfkCHIdNOhfaABpQFg8FDi2lLCIxyM5tnehnQKHUMzqYzmjnq1J7gndO8joPu
otGT80isMchGTEVGtIcd9pfIJAVmJPt2yxEl2anYDCt4ZPjb49guMGnbyT/88PsaNsna43ZHbHnxnCWS
0LsXbTRfFTXwpc2nkY0oHsuyqssyrx/q/Gm7Laqiukww2kZlfitYW8YOaZ0c2BF0+K/hybmBZM39pHme
bkC8LkcRl3r9cUPyEwAA///4CI/0YwIAAA==
`,
	},

	"/namespace/namespace.list.schema.json": {
		name:    "namespace.list.schema.json",
		local:   "namespace/namespace.list.schema.json",
		size:    3131,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/+yWW66bMBCG31mF5faRBKKS0LKGqhuo+uDAlEyKL7WHqFGVvVdcclEKgZPkSOdIvM78
/z82fJb912OM8Y+Y8YTxDZFxSRBoA8qI9JfIwc1RBy7dgBSBEhKcESnMCnTE/cbaNI/2JAi2TqtZU51r
mweZFT9pFsZtzIfWaKw2YAnB8YTVy6iqpxmX1aqBBPKq1ptybhdiDUVna9g8JuIFQa001cqVEuyQsNLS
3kD1YfV6CynxW/KDf3OqsXqH2fOnenesZ9yArujO0KG4/001ZH1MHNMcWVT5mLTfpSbxGGPG6mrtz6Os
QIk05mdL8QdlKXnCFp+jaBVHURh/isMvy+VitVj5g3ZUrT30x3KFiiAH+wjOpYPsPe/uFY9NTwC3YLRD
0nYInwmzCbP7MXOkrchhImwi7O3e/44Elb03Nqj6S33vIVykhDvgfQeAwEpUgroeD4yxH/49jw7vxob6
938pPKmEtWJ/FNXBjYwTUlErvqIj9u38Dm/bV1MO3r8AAAD//51DvLA7DAAA
`,
	},

	"/namespace/namespace.schema.json": {
		name:    "namespace.schema.json",
		local:   "namespace/namespace.schema.json",
		size:    2598,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/+xWy3KrMAzd8xWM712SGOaScMtXdN/pQgGVOI0ftUWmnQz/3iGhKUl5tOmmj2zlc46F
joS89XzfZ39FzlKfLYmMSznXBpWB7B4KdFOhucuWKIErkOgMZMiCPWsff2GmnK+cVpN9dKptwXMLdzQJ
k0bhT0M0Vhu0JNCx1N9lUEfXsMB1O9ILHSCM0xpEppUrJdqe850IEKFV12NaDXy6jYJqEFKj6MlgXTFH
VqiC9WKr7pMq8IZ19WKFGXXpdlLrSm1E/qvq4I1qDaq0+G1mD+cAYfX4nHR3dxFeKQ+lJvjISBir68vP
HYq1kIIGOkHCo5ClZKkf/Y/jeRLHYfIvCa9ms2gezfsskUI1rHDMNaEIC7Tvb9/SYf5VE/5snx3DmUWj
nSBtewy8+Pu9/XWkLRR4sfYHWHvminAEVJ7+71HtvufmuFsgI7FpXmKtC9BKoYCOV+ptML5zvEMib7Ks
vOcAAAD//1xe3uEmCgAA
`,
	},

	"/project/project.create.schema.json": {
		name:    "project.create.schema.json",
		local:   "project/project.create.schema.json",
		size:    330,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/2yPQc6DIBCF956C8P9LlXbVhFP0CohTxVqYDLNpDHdvEE3b2CXvfR95s1RCCPnveqmF
HJkxaqUCgkdj72aA2Lqgoh3hYRRSmMByYwkMg6yLWspd10pNMfimpG2gQfVkbtycLts3f5uIFBCIHUSp
xTojp7PpYP5MVtQwA/nrL2ND2uVcp0OcG34i5HWRyflBfvXp/Up1dXRClw/enZUu3IFI1SsAAP//Razw
MUoBAAA=
`,
	},

	"/project/project.list.schema.json": {
		name:    "project.list.schema.json",
		local:   "project/project.list.schema.json",
		size:    560,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/5yPz07DMAzG732KKHBcF25IeRsvM11Gm1i2LxPau6M0LVQtBbTr9+f32R+NMcY+x7P1
xl5USbxzmTARhHfoUI4xOwkXHMAR5ysGbfsoag+1WK257J27Sk5tVY+ZO3dmeNP25XWCPE1F4kzIGlGs
N+MRk1oWllqRo+Kw0nYZ33YPJ+x/tIqrN8Jydj6VRbuO3A8bXoIB/6KJckzdf2lCEB5GNr8M7H+3DH6l
gBluc2gE19gGc28+AwAA//8Lb3QTMAIAAA==
`,
	},

	"/project/project.schema.json": {
		name:    "project.schema.json",
		local:   "project/project.schema.json",
		size:    430,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/4yPO27FIBBFe1aBSErbJFUkVpEtjPHExrFhBNNEFnuP/Hkff4pXcuYe3cskpJTq3TXK
SNUxUzJaB0JPYH+hxVS5oJPtcARNMfRoWRWrs9KbZ7TuU/DlSqsQW91E+OHy42vz3zaRYiCM7DApI5f+
mQ5Q4/BMligwY/TfV8YWqabPIp/wfOE/wnld4uh8q3b3/HjlQpydUC8/FYeI8jDiYeN1zV5JBPZFT9zl
05gs/gMAAP//nWVdOq4BAAA=
`,
	},

	"/repository/repository.create.schema.json": {
		name:    "repository.create.schema.json",
		local:   "repository/repository.create.schema.json",
		size:    378,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/4SOTY6DMAyF9zlFlJklkJnVSDnFXCEEF0JpYjneVCh3ryDQH1GpS7/vfbZnIaVU375T
RqqBGZPROiIEtO5se0iNjzq5AS5WE2CsHYFlUFXxCtldo/WYYqhL2kTqdUf2xPXP37bjaxORIgKxh6SM
XH9Y0sm2MD0na9UyA4X/d8ZWaebfKh/ihfAVYfkuMfnQqxeeH1OuxNGJ7QiOd+de2fksPp1ZDxTvsDSL
WwAAAP//ALvfrXoBAAA=
`,
	},

	"/repository/repository.list.schema.json": {
		name:    "repository.list.schema.json",
		local:   "repository/repository.list.schema.json",
		size:    798,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/6yQzU7DMAzH732KKHBcF25IfRuvM1lGG1u2LxPau6M0HR8bBTT1+v/46W+/Nc45/5j2
vnP+YMbahUCMmaF/hYi6TRS0P+AIQZCpHZKa39RW1S/NLoSjUm6ruiWJYS/wYu3T80x4mIssxCiWUH3n
pgVFLXhNRvJdL1YyHK+0Rc6nPcAOhx+t4tqJsUyn3RF789eR8+aGl2HEv2hqknL8L00Z+hWRLDTdshrQ
IK74v7lx17bmF/bylK/BjxSIwOkSmsA1doM5N+8BAAD//8EyicoeAwAA
`,
	},

	"/repository/repository.schema.json": {
		name:    "repository.schema.json",
		local:   "repository/repository.schema.json",
		size:    2155,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/8RVTY/aMBS851ekXlS1Jc4HDWGJVFVcem0PPS3KorfkEbwliWsbqSzKf69CskAI+VgV
qTdn/OZ5xvbEe03XdTJgIfF1slaKS9+yUo4Jh+UviFCaLLXkco0xWAJ5SoyCUECvJN+ynmWa0AI1UxFZ
oYCVovakJN+VRC5SjkIxlMTXD4vn6AaecHOOHEpBKRTJj2uMssTcO0ZWg/MZteOYq5NKsCQilfns9JUZ
Wp2TPj3jUr1yjiUkgRgvNF5fpkqRHJZv5XGRHjS8jaUguukmQrL7viK+Pr+c0fV69Ul500qVupBFKFVr
zZn+3PWjXMNo7PnzGf0GdGXTabD33GxAGhtkWm/4/CL8Z49jZ1Tx6Izub2XyEgtqrru9dbqq+JkDfcld
DD989edDc0GDI/Lxk5+PZ/TBptMvCxoMB8RoaNkW55YDJDGGDH4W5F5yZ/Sh1HcavrsbvKePC3MY7G3D
GXmZ1a/s9nYke2lzEsMfFm9j4uvOvet6E9e1J58n9nQ8djzHaxITs6Rk2V16WaIwQtFf8FZsWjJCmMK4
I0OrVMSQ3zayFaxpQ/vtaZPKczYIATvSJzv1VkTg7y0TGDb8Movj67inRkvkesT3+hv2b++equWn6SXS
jrxa00z7GwAA//+1jk5YawgAAA==
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},

	"/namespace": {
		name:  "namespace",
		local: `namespace`,
		isDir: true,
	},

	"/project": {
		name:  "project",
		local: `project`,
		isDir: true,
	},

	"/repository": {
		name:  "repository",
		local: `repository`,
		isDir: true,
	},

	"/tag": {
		name:  "tag",
		local: `tag`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {},

	"namespace": {
		_escData["/namespace/namespace.create.schema.json"],
		_escData["/namespace/namespace.list.schema.json"],
		_escData["/namespace/namespace.schema.json"],
	},

	"project": {
		_escData["/project/project.create.schema.json"],
		_escData["/project/project.list.schema.json"],
		_escData["/project/project.schema.json"],
	},

	"repository": {
		_escData["/repository/repository.create.schema.json"],
		_escData["/repository/repository.list.schema.json"],
		_escData["/repository/repository.schema.json"],
	},

	"tag": {},
}
