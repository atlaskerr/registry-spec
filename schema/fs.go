// Copyright Â© 2019 Open Package Management Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by "esc -private -modtime=1546544639 -pkg=schema -include=.*\.schema.json$ -ignore=test-fixtures/* ."; DO NOT EDIT.

package schema

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return []os.FileInfo(fis[0:limit]), nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/namespace/namespace.create.schema.json": {
		name:    "namespace.create.schema.json",
		local:   "namespace/namespace.create.schema.json",
		size:    645,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/7ySzW6DMBCE7zyF5faYYFAJtFx7raq8wgY2ZFP8I3srtYp494q/lIace2T2m50R3ksk
hJCPVMtSyBOzC6VS1qFxUH1AgyEmq0J1Qg3KgMbgoMJt5REY5WY0j+N5QanUOVizHdXY+kbVHo68TYpp
0cNkhLomJmug3Xvr0DNhkKU4QhtwJNxSH6r2agsHbJfKgAIzerO/55iQ+JJuupXcT/jbYd8/sCfTyD/z
7ver20Rrjz2cseLZc0WkR2ffSBPfFNXwRfpTy1Kkz1mWF1mWFE9F8rLbpXmaLxM0mYlM7gWTYWzQr5MD
Ww8N/mt4dG0gmbgdmNfhSsT7fDbTs9/+uC76CQAA//9BNf3dhQIAAA==
`,
	},

	"/namespace/namespace.list.schema.json": {
		name:    "namespace.list.schema.json",
		local:   "namespace/namespace.list.schema.json",
		size:    3271,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/+yW227TQBCG7/0Uq4XLpE5EmoCfASHuERdTe+pO8R7YGVdUKO+OfGqiEh9SIKiSb2e+
mX9n97c1PyOllH5LmU6UvhPxnMSx82g9pN8gR74iF3N6hwZiCwbZQ4rLglj0oiltkl15Esf37OyyiV65
kMdZgFtZrnZtmzdtIWQZCTkLxefgPAYhZJ2oWygYG8Ifx+uDVtGnUxxHqwQJmmexSToH9KTgIV3ADRYn
U+fpTFJrodRZLg2GfqSi5NFj9QLu5h5T0afB/aJHwwf3QNnf0Ygm6o61+72ofvi+y++6sQSy+ZRu30sn
cOHH9MFVw/LwRZ+rfcYJOiOTIRmjKtDADzKl0Ylav99strvNZrV7t1t9uL5eb9fbxWg52bZ8Ncp2L0hW
MMegh/j9YDddMmavebroBXP/4S8goHdM4sKYfWZ3zu68uDtZXIAcZ2POxvw/xvyHWw0LSNm7h6Ctb+pL
z4cBqdAD6r7vRjAYsiCnViKl1NfFS1apaGCg/vmPwScKQoDHDqobN5gWkqImPhKL+nTY+Nv0M5V99CsA
AP//vOxdH8cMAAA=
`,
	},

	"/namespace/namespace.single.schema.json": {
		name:    "namespace.single.schema.json",
		local:   "namespace/namespace.single.schema.json",
		size:    2635,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/+xW3W6yQBC95ynIft8lCqQoLU/hfdOLEUZcy/50dzBtDO/eIGgVoZqmTZrq7ZlzZs+w
ZzNsHNd12X+escRlSyJtE99XGqWG9BlytGOufJsuUYAvQaDVkCLzGlWD75SJ76+skqMGHSuT+5mBBY2C
uO3wrxVClnHiSkIxM0qjIY6WJe4CCosNQx/iW481WsAci0PkomYtr7dlW0uVtKVAc1LZCoEIjZwN61vi
eBN61UCxrtObxvpjWTJc5qyHVXWxynOGuqj5ClM67tKh1zOvefYH5nJ6lQOaPYXVie3Epd/sh+SlVAQ/
kTFtVG2y9ytfesD5Y3YvhQtOn1yZgFcuSsESN7yPomkcRUF8FwcPk0k4DafekIrLVhV4Z7LAJWGOpjcM
fVpWWsx+q+FvfpUGtbKclBm4wFsarikNlpSBHG9BuLogfHGpWQIquxsK5Xaex+NsQUp83f6uHRyARnAJ
dLysn7zzW9LZGzlxWTnvAQAA//+4Xa/FSwoAAA==
`,
	},

	"/project/project.create.schema.json": {
		name:    "project.create.schema.json",
		local:   "project/project.create.schema.json",
		size:    759,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/9yRQU7DMBBF9zmFZVgmMayQcopeYWpPU5fUY40HJFTl7sixkUqTSKzZ/v/eVya+NUop
/eydHpQ+i8Q0GEMRQwT7DiOm3pNJ9oxXMJHpglY6ywiCui1qKX/0wZhLotCVtCcejWM4SffyVmeeqgjO
efEUYDowRWTxmPSgTjAlLES8z5cPzekER5zukz+NVW5zsnaWQvq4Iq+aRQQR5HDY9yvY317beafMvXxF
zD8rCfsw6g1qfszmttlboWN+kd8rD3i++dO7f3BXs2nuOAtduBUxN98BAAD//9JllNX3AgAA
`,
	},

	"/project/project.list.schema.json": {
		name:    "project.list.schema.json",
		local:   "project/project.list.schema.json",
		size:    1110,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/6yR326yQBDF73kKst93qS6mKC1P0VcYYcSx7J/Mjk1N47s3CFZTwNLE27O/c87k7GcU
x7H6T6XKY7UT8SHX2nm0Hoo3qDAsyOlQ7NCA9uz2WMi8piBq1hrbp4s513ofnJ236sJxpUuGrcyTrAv5
1xmhLEnIWahf2XlkIQwqj7dQB2wJf6ufz+zU5oZbrZFJ0PzQJrVc0cG663MNG6wHn/7WM6mtgwpnw8Eg
jyMNJUePzf5u0wyjhsHTbKTDs3un8jEd0cTe3+L6JmXB4Nj4l7QgTLaamhY8FA+MZPQukDge/1Jl4IPM
wag8Xj6n6TpL0yR7ypKX1Wq5Xq4HlzJkO0tyd0myghVy/9Lozt3j/3ALflPADMcLdA5usV7MKfoKAAD/
/4zSNG9WBAAA
`,
	},

	"/project/project.single.schema.json": {
		name:    "project.single.schema.json",
		local:   "project/project.single.schema.json",
		size:    984,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/9ySTW6DMBCF9z6F5XaZxKCS0HKKXGECE+IU/8ieVK0i7l4RXEQDVO222/feN8wbfGWc
c/GoKlFwcSJyoZDSOjQOyleoMWyUlaE8oQbpvD1jSWLVM736xRVSnoM1617dWF/LysOR1kke+YcIQlUp
UtZAs/fWoSeFQRT8CE3APuHG+m3DTm3ggM1Y+dWwmJsdGb3SmnDR6CfODQQi9Ga/zMfg5pqu2gWz8+nD
YXesQF6ZWsyk2nutXbGlKfZw+xXsh3jX+U1V/6AXmyUXmCEiDGi8ey7zy35HgoPyr5xHZ4Mi6yeHFBre
lb5oUfD0Oct2eZYl+VOevGy36S7djftoZWIymaupDGGNfvg4GzaYXKJlnwEAAP//uXWQUtgDAAA=
`,
	},

	"/repository/repository.create.schema.json": {
		name:    "repository.create.schema.json",
		local:   "repository/repository.create.schema.json",
		size:    807,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/9yQQW6DMBBF95zCcrsE3K4qcYpcYWJPiFPiscbTShXi7hXYqdIE1K6z/f+/h4exUkrp
Z+90p/RRJKbOGIoYIth36DG1nkyyRzyDYYzUWEYQ1HXmcnNhO2NOiUKT05a4N47hIM3LW3E8FRCc8+Ip
wLBjisjiMelOHWBImBfxOl9eOacD7HG4Tv4lK7tVZekshfRxRr5rFhBEkMNumy/Ddnytp41y7uUr4vyz
krAPvV5ZTbfZVFdbFtqf0Mpvy818vvnTuwe4q1olN5ifyaUfq78eu3wgc3fSqfoOAAD///srTLMnAwAA
`,
	},

	"/repository/repository.list.schema.json": {
		name:    "repository.list.schema.json",
		local:   "repository/repository.list.schema.json",
		size:    1362,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/7SSW27yMBCF37OKyP//CDiogbRZRbcwJEMYGl9kD1Jpxd6rEFMoEGq19PXMmW8uOu9J
mqbiP9WiTMWK2fpSSmNRW6heoEE/ISN9tUIF0qE145Y8i1Hf1euHzlLKtTd63KsT4xpZO1jyOCsC4V9o
hLomJqOhfXbGomNCL8p0Ca3H3mFP9f2Ondot4ImN+6p3JWJUZ1rUpKP16shjuYUFtldLXZW3Frs/mMUa
Kxbnlt3ogqdB4Xc0z450E0vzFqo7IkMAhoDxn436bzDVptoo1AwdetgXcdHQXYe8VH/LD92/5ieRM3+Q
QOvM3nq3xHh6G4yLgldSGyXKdPqY5/Miz7PiocieZrPpfDq/epEiHVqymxeTZmzQXW6Y3Nh3+F+nxk8X
OAfbg2kP7m0XmF3yEQAA//9XKaYbUgUAAA==
`,
	},

	"/repository/repository.single.schema.json": {
		name:    "repository.single.schema.json",
		local:   "repository/repository.single.schema.json",
		size:    978,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/7yR327yMAzF7/sUUb7vspBWK3TrU/AKJjUlrPmjxEjbUN99Kg0MaLWp0rTLHJ+ffWKf
EsYY/69qXjG+J3KhEsI6NA7kKzQYlsqKIPeoQXh0lqcDMEgXqBLiEKxZDOrS+kbUHna0yMoI/4sg1LUi
ZQ20G28delIYeMV20AYcHO5WP8fr1Ra22N4qZysQoTebKSJalqc87UZyX6F3h33+QF6Zht/Vu69XlyZj
xm4PKOnCXC3cgMaHjNNj7pHgQM7l4n0eqB/Xe6G/WVlt5VGjIegbzV9det9NyV9oEr1/c0Tn7bkw7x5B
fTweQ8Ob0kfNK5Y/F8W6LIqsfCqzl9UqX+fr20hamejMppIqQ9igvw5NrpNHn+mSzwAAAP//rF1indID
AAA=
`,
	},

	"/tag/tag.create.schema.json": {
		name:    "tag.create.schema.json",
		local:   "tag/tag.create.schema.json",
		size:    1490,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/7yUX2/aMBTF3/kUnoumbcQkYSEUS9PEy163hz0VpeiO3AR32MlsI42ifPcpTShB+dNq
k/ZmDudc/3RzktOIEELHIqac0J21ueGum+Woctj+hBTNVGSu2e5QgmshZVuNYJE6Vaz64xzlrvtgMsUq
dZrp1I01JJZ5i3rETR2EOBZWZAr233SWo7YCDeUkgb3BypE39SfIUpWgRILGNrRXjTv71PFrQjlZXzRC
mpNqX+flV45YpC2M6xFgLWpVrube7GA2D/l6xb4ASzy2jE5hUIxpR7QYDQqF89/J5/7sityf3f4d+uVX
1HwmA8QDrFeUa2CPJdvk3We+nkw3LHpW3n/g5XnF7jy2/LRh0WRMndYwe8yxnGSsFiqlQyunEmMB36vA
C1grdldzXI5vbsZv2f1mOolOnuPPwsJ9ne1fsY147CaW8FvIg6Sc+LdBEC6CwFt8XHjL+dwP/bB9qRSq
9nv9REJZTFEPIx30vrOlVFiUvf1NMi2h7AQ9aNFeykt7aXM0E6A1HGlfb5tBqvHXQWiMW5+TatW9rXE6
K97zcpy5sh8PuH12PSFVMC1HMfoTAAD//6w+eUPSBQAA
`,
	},

	"/tag/tag.list.schema.json": {
		name:    "tag.list.schema.json",
		local:   "tag/tag.list.schema.json",
		size:    2433,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/8xUTY/aMBC98ytSL6raEpOEhrBEqiouvbaHnhZl0ZQ4wVv8UdtIZVH+exUCBZYkmIpK
e0vezLx5zzP2puM4DurSFMUOWhgjdex5QhIuYf4TcqL7VHh6viAMPAM5XlJtkFsVVfC+MPa8Jy04rtC+
ULmXKsgM9kc7grtdIaQpNVRwWH5TQhJlKNEodjJYalJlyGN8K7FEDeTH/yVEDWEvMKsOh9TaVocwA04z
ok1d8LpO+wK+/pqh2JnWBB2ntomV0pPUlObNmk9JwRiieDnER72AwTCKpxP8BXDm43GyicKii9o4is6V
kcJ9lcaHweDEeDC4v7nzGjip3REbwzZWT0xOAT+X1nrvPsfTXn+Gk7/I+w9x+T3BDz4ef5rhpNdFbjOr
WUtSUmqjKM/RdXNGjKQUvlcUttIn+GGn9fD55q77Fj/O+r1k47vBICo8u7T/aE3T5wuuGPymbMVQ7AT3
YRiNwtAffRz54+EwiIKoRRijfFfoW8in3JCcqGv1r9Sy/Yo1vLcvszKhGJSriVaKthy39Ym3iD7mAKVg
jexvXy0nUuTXiiqSNj/S1aAvL7jbfnWt34O9P/HjiczP685tIA6saRMvnXgDm5YwvyGlVGLr5WaEikih
qRFq/a+cnZYOzSM4TqxfxC1xlXZGU3T+BAAA//81bwTegQkAAA==
`,
	},

	"/tag/tag.single.schema.json": {
		name:    "tag.single.schema.json",
		local:   "tag/tag.single.schema.json",
		size:    1701,
		modtime: 1546544639,
		compressed: `
H4sIAAAAAAAC/7yUzY7aMBSF9zxF6kFVWzBJaAiDpapi02276GpQBt0SJ3iKf2obqQzKu1eZBEian2Fa
aXbO0TnXn69vfBw4joOGLEbEQVtrlSGuKxUVCjY/IaVmwqRrNlvKwbWQonHhL5RThrjug5ECF+pE6tSN
NSQWe/Mye1MGIY6ZZVLA7puWimrLqEHESWBnaOFQVf2JLlc5CJZQYyvaVeVOPnH4miDirC6a41Qrlb7W
zWuOmKUNjHoJsJZqkbfm3mxhOgvJaom/AE48vIiOYZANUUs0G/QK2fjVyWf+tEbuT2//Df3yFVXvpIe4
h7VGuQL8mLON3n0mq9FkjaOz8v4DyddLfOfhxac1jkZDNG4UswdF80rGaiZS1NdyxGnM4HsReAZrie9K
jsvyzc3wLb5fT0bR0Rv70zBzr7P9L7Zhj+3EHH4zvueIOP5tEITzIPDmH+feYjbzQz9sbsqZKP1eNxET
lqZU9yPt9a51ShGzlHfObyI1h3wm0F6zZlOe60uTo5oAreGAuua2GkSa/tozTePGc1K0unNqxq0j3vFz
nLjkjwe6ObvOHEgA/+tWOw5fjxgFm5fmlJZPDC9LaaqkYVbqw3XBwTndOHs2+BMAAP//pEOqXaUGAAA=
`,
	},

	"/": {
		name:  "/",
		local: `.`,
		isDir: true,
	},

	"/namespace": {
		name:  "namespace",
		local: `namespace`,
		isDir: true,
	},

	"/project": {
		name:  "project",
		local: `project`,
		isDir: true,
	},

	"/repository": {
		name:  "repository",
		local: `repository`,
		isDir: true,
	},

	"/tag": {
		name:  "tag",
		local: `tag`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	".": {},

	"namespace": {
		_escData["/namespace/namespace.create.schema.json"],
		_escData["/namespace/namespace.list.schema.json"],
		_escData["/namespace/namespace.single.schema.json"],
	},

	"project": {
		_escData["/project/project.create.schema.json"],
		_escData["/project/project.list.schema.json"],
		_escData["/project/project.single.schema.json"],
	},

	"repository": {
		_escData["/repository/repository.create.schema.json"],
		_escData["/repository/repository.list.schema.json"],
		_escData["/repository/repository.single.schema.json"],
	},

	"tag": {
		_escData["/tag/tag.create.schema.json"],
		_escData["/tag/tag.list.schema.json"],
		_escData["/tag/tag.single.schema.json"],
	},
}
